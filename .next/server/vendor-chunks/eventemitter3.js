"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eventemitter3";
exports.ids = ["vendor-chunks/eventemitter3"];
exports.modules = {

/***/ "(ssr)/./node_modules/eventemitter3/index.js":
/*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\n\nvar has = Object.prototype.hasOwnProperty,\n  prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n  var listener = new EE(fn, context || emitter, once),\n    evt = prefix ? prefix + event : event;\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = [],\n    events,\n    name;\n  if (this._eventsCount === 0) return names;\n  for (name in events = this._events) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event,\n    handlers = this._events[evt];\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event,\n    listeners = this._events[evt];\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n  if (!this._events[evt]) return false;\n  var listeners = this._events[evt],\n    len = arguments.length,\n    args,\n    i;\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n    switch (len) {\n      case 1:\n        return listeners.fn.call(listeners.context), true;\n      case 2:\n        return listeners.fn.call(listeners.context, a1), true;\n      case 3:\n        return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4:\n        return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5:\n        return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6:\n        return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n    for (i = 1, args = new Array(len - 1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length,\n      j;\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n      switch (len) {\n        case 1:\n          listeners[i].fn.call(listeners[i].context);\n          break;\n        case 2:\n          listeners[i].fn.call(listeners[i].context, a1);\n          break;\n        case 3:\n          listeners[i].fn.call(listeners[i].context, a1, a2);\n          break;\n        case 4:\n          listeners[i].fn.call(listeners[i].context, a1, a2, a3);\n          break;\n        default:\n          if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n  var listeners = this._events[evt];\n  if (listeners.fn) {\n    if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);\n  }\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxHQUFHLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxjQUFjO0VBQ3JDQyxNQUFNLEdBQUcsR0FBRzs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxNQUFNQSxDQUFBLEVBQUcsQ0FBQzs7QUFFbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJSixNQUFNLENBQUNLLE1BQU0sRUFBRTtFQUNqQkQsTUFBTSxDQUFDSCxTQUFTLEdBQUdELE1BQU0sQ0FBQ0ssTUFBTSxDQUFDLElBQUksQ0FBQzs7RUFFdEM7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLENBQUMsSUFBSUQsTUFBTSxDQUFDLENBQUMsQ0FBQ0UsU0FBUyxFQUFFSCxNQUFNLEdBQUcsS0FBSztBQUM3Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTSSxFQUFFQSxDQUFDQyxFQUFFLEVBQUVDLE9BQU8sRUFBRUMsSUFBSSxFQUFFO0VBQzdCLElBQUksQ0FBQ0YsRUFBRSxHQUFHQSxFQUFFO0VBQ1osSUFBSSxDQUFDQyxPQUFPLEdBQUdBLE9BQU87RUFDdEIsSUFBSSxDQUFDQyxJQUFJLEdBQUdBLElBQUksSUFBSSxLQUFLO0FBQzNCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxXQUFXQSxDQUFDQyxPQUFPLEVBQUVDLEtBQUssRUFBRUwsRUFBRSxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRTtFQUN0RCxJQUFJLE9BQU9GLEVBQUUsS0FBSyxVQUFVLEVBQUU7SUFDNUIsTUFBTSxJQUFJTSxTQUFTLENBQUMsaUNBQWlDLENBQUM7RUFDeEQ7RUFFQSxJQUFJQyxRQUFRLEdBQUcs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QUFJO0FBQ2IsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQUcsWUFBWSxDQUFDcEIsU0FBUyxDQUFDb0QsR0FBRyxHQUFHaEMsWUFBWSxDQUFDcEIsU0FBUyxDQUFDOEMsY0FBYztBQUNsRTFCLFlBQVksQ0FBQ3BCLFNBQVMsQ0FBQ1UsV0FBVyxHQUFHVSxZQUFZLENBQUNwQixTQUFTLENBQUNrRCxFQUFFOztBQUU5RDtBQUNBO0FBQ0E7QUFDQTlCLFlBQVksQ0FBQ2lDLFFBQVEsR0FBR25ELE1BQU07O0FBRTlCO0FBQ0E7QUFDQTtBQUNBa0IsWUFBWSxDQUFDQSxZQUFZLEdBQUdBLFlBQVk7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBLElBQUksSUFBNkIsRUFBRTtFQUNqQ2tDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHbkMsWUFBWTtBQUMvQiIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvZXZlbnRlbWl0dGVyMy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgcHJlZml4ID0gJ34nO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEV2ZW50cygpIHt9XG5cbi8vXG4vLyBXZSB0cnkgdG8gbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuIEluIHNvbWUgZW5naW5lcyBjcmVhdGluZyBhblxuLy8gaW5zdGFuY2UgaW4gdGhpcyB3YXkgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgZGlyZWN0bHkuXG4vLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuLy8gY2hhcmFjdGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90XG4vLyBvdmVycmlkZGVuIG9yIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbi8vXG5pZiAoT2JqZWN0LmNyZWF0ZSkge1xuICBFdmVudHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAvL1xuICAvLyBUaGlzIGhhY2sgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGBfX3Byb3RvX19gIHByb3BlcnR5IGlzIHN0aWxsIGluaGVyaXRlZCBpblxuICAvLyBzb21lIG9sZCBicm93c2VycyBsaWtlIEFuZHJvaWQgNCwgaVBob25lIDUuMSwgT3BlcmEgMTEgYW5kIFNhZmFyaSA1LlxuICAvL1xuICBpZiAoIW5ldyBFdmVudHMoKS5fX3Byb3RvX18pIHByZWZpeCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCBlbWl0dGVyLCBvbmNlKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdKSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCBlbWl0dGVyLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0uZm4pIGVtaXR0ZXIuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gW2VtaXR0ZXIuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIGVtaXR0ZXI7XG59XG5cbi8qKlxuICogQ2xlYXIgZXZlbnQgYnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2dCBUaGUgRXZlbnQgbmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNsZWFyRXZlbnQoZW1pdHRlciwgZXZ0KSB7XG4gIGlmICgtLWVtaXR0ZXIuX2V2ZW50c0NvdW50ID09PSAwKSBlbWl0dGVyLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIGVsc2UgZGVsZXRlIGVtaXR0ZXIuX2V2ZW50c1tldnRdO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgdmFyIG5hbWVzID0gW11cbiAgICAsIGV2ZW50c1xuICAgICwgbmFtZTtcblxuICBpZiAodGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHJldHVybiBuYW1lcztcblxuICBmb3IgKG5hbWUgaW4gKGV2ZW50cyA9IHRoaXMuX2V2ZW50cykpIHtcbiAgICBpZiAoaGFzLmNhbGwoZXZlbnRzLCBuYW1lKSkgbmFtZXMucHVzaChwcmVmaXggPyBuYW1lLnNsaWNlKDEpIDogbmFtZSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHJldHVybiBuYW1lcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhldmVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFoYW5kbGVycykgcmV0dXJuIFtdO1xuICBpZiAoaGFuZGxlcnMuZm4pIHJldHVybiBbaGFuZGxlcnMuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gaGFuZGxlcnNbaV0uZm47XG4gIH1cblxuICByZXR1cm4gZWU7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gbGlzdGVuZXJDb3VudChldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiAwO1xuICBpZiAobGlzdGVuZXJzLmZuKSByZXR1cm4gMTtcbiAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGg7XG59O1xuXG4vKipcbiAqIENhbGxzIGVhY2ggb2YgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQWRkIGEgb25lLXRpbWUgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIHRydWUpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGlzIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIGlmICghZm4pIHtcbiAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChcbiAgICAgIGxpc3RlbmVycy5mbiA9PT0gZm4gJiZcbiAgICAgICghb25jZSB8fCBsaXN0ZW5lcnMub25jZSkgJiZcbiAgICAgICghY29udGV4dCB8fCBsaXN0ZW5lcnMuY29udGV4dCA9PT0gY29udGV4dClcbiAgICApIHtcbiAgICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50cyA9IFtdLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmbiB8fFxuICAgICAgICAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpIHx8XG4gICAgICAgIChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICBpZiAoZXZlbnRzLmxlbmd0aCkgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICAgIGVsc2UgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0O1xuXG4gIGlmIChldmVudCkge1xuICAgIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1tldnRdKSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG4iXSwibmFtZXMiOlsiaGFzIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwcmVmaXgiLCJFdmVudHMiLCJjcmVhdGUiLCJfX3Byb3RvX18iLCJFRSIsImZuIiwiY29udGV4dCIsIm9uY2UiLCJhZGRMaXN0ZW5lciIsImVtaXR0ZXIiLCJldmVudCIsIlR5cGVFcnJvciIsImxpc3RlbmVyIiwiZXZ0IiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsInB1c2giLCJjbGVhckV2ZW50IiwiRXZlbnRFbWl0dGVyIiwiZXZlbnROYW1lcyIsIm5hbWVzIiwiZXZlbnRzIiwibmFtZSIsImNhbGwiLCJzbGljZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsImNvbmNhdCIsImxpc3RlbmVycyIsImhhbmRsZXJzIiwiaSIsImwiLCJsZW5ndGgiLCJlZSIsIkFycmF5IiwibGlzdGVuZXJDb3VudCIsImVtaXQiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwibGVuIiwiYXJndW1lbnRzIiwiYXJncyIsInJlbW92ZUxpc3RlbmVyIiwidW5kZWZpbmVkIiwiYXBwbHkiLCJqIiwib24iLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJvZmYiLCJwcmVmaXhlZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eventemitter3/index.js\n");

/***/ })

};
;