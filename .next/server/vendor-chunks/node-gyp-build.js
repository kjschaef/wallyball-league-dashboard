"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-gyp-build";
exports.ids = ["vendor-chunks/node-gyp-build"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-gyp-build/index.js":
/*!**********************************************!*\
  !*** ./node_modules/node-gyp-build/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst runtimeRequire =  true ? require : 0; // eslint-disable-line\nif (typeof runtimeRequire.addon === 'function') {\n  // if the platform supports native resolving prefer that\n  module.exports = runtimeRequire.addon.bind(runtimeRequire);\n} else {\n  // else use the runtime version here\n  module.exports = __webpack_require__(/*! ./node-gyp-build.js */ \"(rsc)/./node_modules/node-gyp-build/node-gyp-build.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1neXAtYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxjQUFjLEdBQUcsS0FBeUMsR0FBR0UsT0FBdUIsR0FBR0MsQ0FBTyxFQUFDO0FBQ3JHLElBQUksT0FBT0gsY0FBYyxDQUFDSSxLQUFLLEtBQUssVUFBVSxFQUFFO0VBQUU7RUFDaERDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHTixjQUFjLENBQUNJLEtBQUssQ0FBQ0csSUFBSSxDQUFDUCxjQUFjLENBQUM7QUFDNUQsQ0FBQyxNQUFNO0VBQUU7RUFDUEssd0hBQStDO0FBQ2pEIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWd5cC1idWlsZC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBydW50aW1lUmVxdWlyZSA9IHR5cGVvZiBfX3dlYnBhY2tfcmVxdWlyZV9fID09PSAnZnVuY3Rpb24nID8gX19ub25fd2VicGFja19yZXF1aXJlX18gOiByZXF1aXJlIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgcnVudGltZVJlcXVpcmUuYWRkb24gPT09ICdmdW5jdGlvbicpIHsgLy8gaWYgdGhlIHBsYXRmb3JtIHN1cHBvcnRzIG5hdGl2ZSByZXNvbHZpbmcgcHJlZmVyIHRoYXRcbiAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lUmVxdWlyZS5hZGRvbi5iaW5kKHJ1bnRpbWVSZXF1aXJlKVxufSBlbHNlIHsgLy8gZWxzZSB1c2UgdGhlIHJ1bnRpbWUgdmVyc2lvbiBoZXJlXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9ub2RlLWd5cC1idWlsZC5qcycpXG59XG4iXSwibmFtZXMiOlsicnVudGltZVJlcXVpcmUiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiX19ub25fd2VicGFja19yZXF1aXJlX18iLCJyZXF1aXJlIiwiYWRkb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiYmluZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-gyp-build/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-gyp-build/node-gyp-build.js":
/*!*******************************************************!*\
  !*** ./node_modules/node-gyp-build/node-gyp-build.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar fs = __webpack_require__(/*! fs */ \"fs\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar os = __webpack_require__(/*! os */ \"os\");\n\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nvar runtimeRequire =  true ? require : 0; // eslint-disable-line\n\nvar vars = process.config && process.config.variables || {};\nvar prebuildsOnly = !!process.env.PREBUILDS_ONLY;\nvar abi = process.versions.modules; // TODO: support old node where this is undef\nvar runtime = isElectron() ? 'electron' : isNwjs() ? 'node-webkit' : 'node';\nvar arch = process.env.npm_config_arch || os.arch();\nvar platform = process.env.npm_config_platform || os.platform();\nvar libc = process.env.LIBC || (isAlpine(platform) ? 'musl' : 'glibc');\nvar armv = process.env.ARM_VERSION || (arch === 'arm64' ? '8' : vars.arm_version) || '';\nvar uv = (process.versions.uv || '').split('.')[0];\nmodule.exports = load;\nfunction load(dir) {\n  return runtimeRequire(load.resolve(dir));\n}\nload.resolve = load.path = function (dir) {\n  dir = path.resolve(dir || '.');\n  try {\n    var name = runtimeRequire(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_');\n    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD'];\n  } catch (err) {}\n  if (!prebuildsOnly) {\n    var release = getFirst(path.join(dir, 'build/Release'), matchBuild);\n    if (release) return release;\n    var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild);\n    if (debug) return debug;\n  }\n  var prebuild = resolve(dir);\n  if (prebuild) return prebuild;\n  var nearby = resolve(path.dirname(process.execPath));\n  if (nearby) return nearby;\n  var target = ['platform=' + platform, 'arch=' + arch, 'runtime=' + runtime, 'abi=' + abi, 'uv=' + uv, armv ? 'armv=' + armv : '', 'libc=' + libc, 'node=' + process.versions.node, process.versions.electron ? 'electron=' + process.versions.electron : '',  true ? 'webpack=true' : 0 // eslint-disable-line\n  ].filter(Boolean).join(' ');\n  throw new Error('No native build was found for ' + target + '\\n    loaded from: ' + dir + '\\n');\n  function resolve(dir) {\n    // Find matching \"prebuilds/<platform>-<arch>\" directory\n    var tuples = readdirSync(path.join(dir, 'prebuilds')).map(parseTuple);\n    var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0];\n    if (!tuple) return;\n\n    // Find most specific flavor first\n    var prebuilds = path.join(dir, 'prebuilds', tuple.name);\n    var parsed = readdirSync(prebuilds).map(parseTags);\n    var candidates = parsed.filter(matchTags(runtime, abi));\n    var winner = candidates.sort(compareTags(runtime))[0];\n    if (winner) return path.join(prebuilds, winner.file);\n  }\n};\nfunction readdirSync(dir) {\n  try {\n    return fs.readdirSync(dir);\n  } catch (err) {\n    return [];\n  }\n}\nfunction getFirst(dir, filter) {\n  var files = readdirSync(dir).filter(filter);\n  return files[0] && path.join(dir, files[0]);\n}\nfunction matchBuild(name) {\n  return /\\.node$/.test(name);\n}\nfunction parseTuple(name) {\n  // Example: darwin-x64+arm64\n  var arr = name.split('-');\n  if (arr.length !== 2) return;\n  var platform = arr[0];\n  var architectures = arr[1].split('+');\n  if (!platform) return;\n  if (!architectures.length) return;\n  if (!architectures.every(Boolean)) return;\n  return {\n    name,\n    platform,\n    architectures\n  };\n}\nfunction matchTuple(platform, arch) {\n  return function (tuple) {\n    if (tuple == null) return false;\n    if (tuple.platform !== platform) return false;\n    return tuple.architectures.includes(arch);\n  };\n}\nfunction compareTuples(a, b) {\n  // Prefer single-arch prebuilds over multi-arch\n  return a.architectures.length - b.architectures.length;\n}\nfunction parseTags(file) {\n  var arr = file.split('.');\n  var extension = arr.pop();\n  var tags = {\n    file: file,\n    specificity: 0\n  };\n  if (extension !== 'node') return;\n  for (var i = 0; i < arr.length; i++) {\n    var tag = arr[i];\n    if (tag === 'node' || tag === 'electron' || tag === 'node-webkit') {\n      tags.runtime = tag;\n    } else if (tag === 'napi') {\n      tags.napi = true;\n    } else if (tag.slice(0, 3) === 'abi') {\n      tags.abi = tag.slice(3);\n    } else if (tag.slice(0, 2) === 'uv') {\n      tags.uv = tag.slice(2);\n    } else if (tag.slice(0, 4) === 'armv') {\n      tags.armv = tag.slice(4);\n    } else if (tag === 'glibc' || tag === 'musl') {\n      tags.libc = tag;\n    } else {\n      continue;\n    }\n    tags.specificity++;\n  }\n  return tags;\n}\nfunction matchTags(runtime, abi) {\n  return function (tags) {\n    if (tags == null) return false;\n    if (tags.runtime && tags.runtime !== runtime && !runtimeAgnostic(tags)) return false;\n    if (tags.abi && tags.abi !== abi && !tags.napi) return false;\n    if (tags.uv && tags.uv !== uv) return false;\n    if (tags.armv && tags.armv !== armv) return false;\n    if (tags.libc && tags.libc !== libc) return false;\n    return true;\n  };\n}\nfunction runtimeAgnostic(tags) {\n  return tags.runtime === 'node' && tags.napi;\n}\nfunction compareTags(runtime) {\n  // Precedence: non-agnostic runtime, abi over napi, then by specificity.\n  return function (a, b) {\n    if (a.runtime !== b.runtime) {\n      return a.runtime === runtime ? -1 : 1;\n    } else if (a.abi !== b.abi) {\n      return a.abi ? -1 : 1;\n    } else if (a.specificity !== b.specificity) {\n      return a.specificity > b.specificity ? -1 : 1;\n    } else {\n      return 0;\n    }\n  };\n}\nfunction isNwjs() {\n  return !!(process.versions && process.versions.nw);\n}\nfunction isElectron() {\n  if (process.versions && process.versions.electron) return true;\n  if (process.env.ELECTRON_RUN_AS_NODE) return true;\n  return  false && 0;\n}\nfunction isAlpine(platform) {\n  return platform === 'linux' && fs.existsSync('/etc/alpine-release');\n}\n\n// Exposed for unit tests\n// TODO: move to lib\nload.parseTags = parseTags;\nload.matchTags = matchTags;\nload.compareTags = compareTags;\nload.parseTuple = parseTuple;\nload.matchTuple = matchTuple;\nload.compareTuples = compareTuples;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1neXAtYnVpbGQvbm9kZS1neXAtYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxFQUFFLEdBQUdDLG1CQUFPLENBQUMsY0FBSSxDQUFDO0FBQ3RCLElBQUlDLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxrQkFBTSxDQUFDO0FBQzFCLElBQUlFLEVBQUUsR0FBR0YsbUJBQU8sQ0FBQyxjQUFJLENBQUM7O0FBRXRCO0FBQ0EsSUFBSUcsY0FBYyxHQUFHLEtBQXlDLEdBQUdFLE9BQXVCLEdBQUdMLENBQU8sRUFBQzs7QUFFbkcsSUFBSU0sSUFBSSxHQUFJQyxPQUFPLENBQUNDLE1BQU0sSUFBSUQsT0FBTyxDQUFDQyxNQUFNLENBQUNDLFNBQVMsSUFBSyxDQUFDLENBQUM7QUFDN0QsSUFBSUMsYUFBYSxHQUFHLENBQUMsQ0FBQ0gsT0FBTyxDQUFDSSxHQUFHLENBQUNDLGNBQWM7QUFDaEQsSUFBSUMsR0FBRyxHQUFHTixPQUFPLENBQUNPLFFBQVEsQ0FBQ0MsT0FBTyxFQUFDO0FBQ25DLElBQUlDLE9BQU8sR0FBR0MsVUFBVSxDQUFDLENBQUMsR0FBRyxVQUFVLEdBQUlDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsYUFBYSxHQUFHLE1BQU87QUFFN0UsSUFBSUMsSUFBSSxHQUFHWixPQUFPLENBQUNJLEdBQUcsQ0FBQ1MsZUFBZSxJQUFJbEIsRUFBRSxDQUFDaUIsSUFBSSxDQUFDLENBQUM7QUFDbkQsSUFBSUUsUUFBUSxHQUFHZCxPQUFPLENBQUNJLEdBQUcsQ0FBQ1csbUJBQW1CLElBQUlwQixFQUFFLENBQUNtQixRQUFRLENBQUMsQ0FBQztBQUMvRCxJQUFJRSxJQUFJLEdBQUdoQixPQUFPLENBQUNJLEdBQUcsQ0FBQ2EsSUFBSSxLQUFLQyxRQUFRLENBQUNKLFFBQVEsQ0FBQyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFDdEUsSUFBSUssSUFBSSxHQUFHbkIsT0FBTyxDQUFDSSxHQUFHLENBQUNnQixXQUFX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Q0FBQ08sUUFBUSxJQUFJUCxPQUFPLENBQUNPLFFBQVEsQ0FBQ3FDLFFBQVEsRUFBRSxPQUFPLElBQUk7RUFDOUQsSUFBSTVDLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDK0Usb0JBQW9CLEVBQUUsT0FBTyxJQUFJO0VBQ2pELE9BQU8sTUFBK0MsSUFBSUMsQ0FBa0M7QUFDOUY7QUFFQSxTQUFTbEUsUUFBUUEsQ0FBRUosUUFBUSxFQUFFO0VBQzNCLE9BQU9BLFFBQVEsS0FBSyxPQUFPLElBQUl0QixFQUFFLENBQUM4RixVQUFVLENBQUMscUJBQXFCLENBQUM7QUFDckU7O0FBRUE7QUFDQTtBQUNBNUQsSUFBSSxDQUFDZ0MsU0FBUyxHQUFHQSxTQUFTO0FBQzFCaEMsSUFBSSxDQUFDa0MsU0FBUyxHQUFHQSxTQUFTO0FBQzFCbEMsSUFBSSxDQUFDb0MsV0FBVyxHQUFHQSxXQUFXO0FBQzlCcEMsSUFBSSxDQUFDeUIsVUFBVSxHQUFHQSxVQUFVO0FBQzVCekIsSUFBSSxDQUFDMkIsVUFBVSxHQUFHQSxVQUFVO0FBQzVCM0IsSUFBSSxDQUFDNkIsYUFBYSxHQUFHQSxhQUFhIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWd5cC1idWlsZC9ub2RlLWd5cC1idWlsZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnMgPSByZXF1aXJlKCdmcycpXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxudmFyIG9zID0gcmVxdWlyZSgnb3MnKVxuXG4vLyBXb3JrYXJvdW5kIHRvIGZpeCB3ZWJwYWNrJ3MgYnVpbGQgd2FybmluZ3M6ICd0aGUgcmVxdWVzdCBvZiBhIGRlcGVuZGVuY3kgaXMgYW4gZXhwcmVzc2lvbidcbnZhciBydW50aW1lUmVxdWlyZSA9IHR5cGVvZiBfX3dlYnBhY2tfcmVxdWlyZV9fID09PSAnZnVuY3Rpb24nID8gX19ub25fd2VicGFja19yZXF1aXJlX18gOiByZXF1aXJlIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxudmFyIHZhcnMgPSAocHJvY2Vzcy5jb25maWcgJiYgcHJvY2Vzcy5jb25maWcudmFyaWFibGVzKSB8fCB7fVxudmFyIHByZWJ1aWxkc09ubHkgPSAhIXByb2Nlc3MuZW52LlBSRUJVSUxEU19PTkxZXG52YXIgYWJpID0gcHJvY2Vzcy52ZXJzaW9ucy5tb2R1bGVzIC8vIFRPRE86IHN1cHBvcnQgb2xkIG5vZGUgd2hlcmUgdGhpcyBpcyB1bmRlZlxudmFyIHJ1bnRpbWUgPSBpc0VsZWN0cm9uKCkgPyAnZWxlY3Ryb24nIDogKGlzTndqcygpID8gJ25vZGUtd2Via2l0JyA6ICdub2RlJylcblxudmFyIGFyY2ggPSBwcm9jZXNzLmVudi5ucG1fY29uZmlnX2FyY2ggfHwgb3MuYXJjaCgpXG52YXIgcGxhdGZvcm0gPSBwcm9jZXNzLmVudi5ucG1fY29uZmlnX3BsYXRmb3JtIHx8IG9zLnBsYXRmb3JtKClcbnZhciBsaWJjID0gcHJvY2Vzcy5lbnYuTElCQyB8fCAoaXNBbHBpbmUocGxhdGZvcm0pID8gJ211c2wnIDogJ2dsaWJjJylcbnZhciBhcm12ID0gcHJvY2Vzcy5lbnYuQVJNX1ZFUlNJT04gfHwgKGFyY2ggPT09ICdhcm02NCcgPyAnOCcgOiB2YXJzLmFybV92ZXJzaW9uKSB8fCAnJ1xudmFyIHV2ID0gKHByb2Nlc3MudmVyc2lvbnMudXYgfHwgJycpLnNwbGl0KCcuJylbMF1cblxubW9kdWxlLmV4cG9ydHMgPSBsb2FkXG5cbmZ1bmN0aW9uIGxvYWQgKGRpcikge1xuICByZXR1cm4gcnVudGltZVJlcXVpcmUobG9hZC5yZXNvbHZlKGRpcikpXG59XG5cbmxvYWQucmVzb2x2ZSA9IGxvYWQucGF0aCA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgZGlyID0gcGF0aC5yZXNvbHZlKGRpciB8fCAnLicpXG5cbiAgdHJ5IHtcbiAgICB2YXIgbmFtZSA9IHJ1bnRpbWVSZXF1aXJlKHBhdGguam9pbihkaXIsICdwYWNrYWdlLmpzb24nKSkubmFtZS50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoLy0vZywgJ18nKVxuICAgIGlmIChwcm9jZXNzLmVudltuYW1lICsgJ19QUkVCVUlMRCddKSBkaXIgPSBwcm9jZXNzLmVudltuYW1lICsgJ19QUkVCVUlMRCddXG4gIH0gY2F0Y2ggKGVycikge31cblxuICBpZiAoIXByZWJ1aWxkc09ubHkpIHtcbiAgICB2YXIgcmVsZWFzZSA9IGdldEZpcnN0KHBhdGguam9pbihkaXIsICdidWlsZC9SZWxlYXNlJyksIG1hdGNoQnVpbGQpXG4gICAgaWYgKHJlbGVhc2UpIHJldHVybiByZWxlYXNlXG5cbiAgICB2YXIgZGVidWcgPSBnZXRGaXJzdChwYXRoLmpvaW4oZGlyLCAnYnVpbGQvRGVidWcnKSwgbWF0Y2hCdWlsZClcbiAgICBpZiAoZGVidWcpIHJldHVybiBkZWJ1Z1xuICB9XG5cbiAgdmFyIHByZWJ1aWxkID0gcmVzb2x2ZShkaXIpXG4gIGlmIChwcmVidWlsZCkgcmV0dXJuIHByZWJ1aWxkXG5cbiAgdmFyIG5lYXJieSA9IHJlc29sdmUocGF0aC5kaXJuYW1lKHByb2Nlc3MuZXhlY1BhdGgpKVxuICBpZiAobmVhcmJ5KSByZXR1cm4gbmVhcmJ5XG5cbiAgdmFyIHRhcmdldCA9IFtcbiAgICAncGxhdGZvcm09JyArIHBsYXRmb3JtLFxuICAgICdhcmNoPScgKyBhcmNoLFxuICAgICdydW50aW1lPScgKyBydW50aW1lLFxuICAgICdhYmk9JyArIGFiaSxcbiAgICAndXY9JyArIHV2LFxuICAgIGFybXYgPyAnYXJtdj0nICsgYXJtdiA6ICcnLFxuICAgICdsaWJjPScgKyBsaWJjLFxuICAgICdub2RlPScgKyBwcm9jZXNzLnZlcnNpb25zLm5vZGUsXG4gICAgcHJvY2Vzcy52ZXJzaW9ucy5lbGVjdHJvbiA/ICdlbGVjdHJvbj0nICsgcHJvY2Vzcy52ZXJzaW9ucy5lbGVjdHJvbiA6ICcnLFxuICAgIHR5cGVvZiBfX3dlYnBhY2tfcmVxdWlyZV9fID09PSAnZnVuY3Rpb24nID8gJ3dlYnBhY2s9dHJ1ZScgOiAnJyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKVxuXG4gIHRocm93IG5ldyBFcnJvcignTm8gbmF0aXZlIGJ1aWxkIHdhcyBmb3VuZCBmb3IgJyArIHRhcmdldCArICdcXG4gICAgbG9hZGVkIGZyb206ICcgKyBkaXIgKyAnXFxuJylcblxuICBmdW5jdGlvbiByZXNvbHZlIChkaXIpIHtcbiAgICAvLyBGaW5kIG1hdGNoaW5nIFwicHJlYnVpbGRzLzxwbGF0Zm9ybT4tPGFyY2g+XCIgZGlyZWN0b3J5XG4gICAgdmFyIHR1cGxlcyA9IHJlYWRkaXJTeW5jKHBhdGguam9pbihkaXIsICdwcmVidWlsZHMnKSkubWFwKHBhcnNlVHVwbGUpXG4gICAgdmFyIHR1cGxlID0gdHVwbGVzLmZpbHRlcihtYXRjaFR1cGxlKHBsYXRmb3JtLCBhcmNoKSkuc29ydChjb21wYXJlVHVwbGVzKVswXVxuICAgIGlmICghdHVwbGUpIHJldHVyblxuXG4gICAgLy8gRmluZCBtb3N0IHNwZWNpZmljIGZsYXZvciBmaXJzdFxuICAgIHZhciBwcmVidWlsZHMgPSBwYXRoLmpvaW4oZGlyLCAncHJlYnVpbGRzJywgdHVwbGUubmFtZSlcbiAgICB2YXIgcGFyc2VkID0gcmVhZGRpclN5bmMocHJlYnVpbGRzKS5tYXAocGFyc2VUYWdzKVxuICAgIHZhciBjYW5kaWRhdGVzID0gcGFyc2VkLmZpbHRlcihtYXRjaFRhZ3MocnVudGltZSwgYWJpKSlcbiAgICB2YXIgd2lubmVyID0gY2FuZGlkYXRlcy5zb3J0KGNvbXBhcmVUYWdzKHJ1bnRpbWUpKVswXVxuICAgIGlmICh3aW5uZXIpIHJldHVybiBwYXRoLmpvaW4ocHJlYnVpbGRzLCB3aW5uZXIuZmlsZSlcbiAgfVxufVxuXG5mdW5jdGlvbiByZWFkZGlyU3luYyAoZGlyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZzLnJlYWRkaXJTeW5jKGRpcilcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Rmlyc3QgKGRpciwgZmlsdGVyKSB7XG4gIHZhciBmaWxlcyA9IHJlYWRkaXJTeW5jKGRpcikuZmlsdGVyKGZpbHRlcilcbiAgcmV0dXJuIGZpbGVzWzBdICYmIHBhdGguam9pbihkaXIsIGZpbGVzWzBdKVxufVxuXG5mdW5jdGlvbiBtYXRjaEJ1aWxkIChuYW1lKSB7XG4gIHJldHVybiAvXFwubm9kZSQvLnRlc3QobmFtZSlcbn1cblxuZnVuY3Rpb24gcGFyc2VUdXBsZSAobmFtZSkge1xuICAvLyBFeGFtcGxlOiBkYXJ3aW4teDY0K2FybTY0XG4gIHZhciBhcnIgPSBuYW1lLnNwbGl0KCctJylcbiAgaWYgKGFyci5sZW5ndGggIT09IDIpIHJldHVyblxuXG4gIHZhciBwbGF0Zm9ybSA9IGFyclswXVxuICB2YXIgYXJjaGl0ZWN0dXJlcyA9IGFyclsxXS5zcGxpdCgnKycpXG5cbiAgaWYgKCFwbGF0Zm9ybSkgcmV0dXJuXG4gIGlmICghYXJjaGl0ZWN0dXJlcy5sZW5ndGgpIHJldHVyblxuICBpZiAoIWFyY2hpdGVjdHVyZXMuZXZlcnkoQm9vbGVhbikpIHJldHVyblxuXG4gIHJldHVybiB7IG5hbWUsIHBsYXRmb3JtLCBhcmNoaXRlY3R1cmVzIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hUdXBsZSAocGxhdGZvcm0sIGFyY2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0dXBsZSkge1xuICAgIGlmICh0dXBsZSA9PSBudWxsKSByZXR1cm4gZmFsc2VcbiAgICBpZiAodHVwbGUucGxhdGZvcm0gIT09IHBsYXRmb3JtKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gdHVwbGUuYXJjaGl0ZWN0dXJlcy5pbmNsdWRlcyhhcmNoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVUdXBsZXMgKGEsIGIpIHtcbiAgLy8gUHJlZmVyIHNpbmdsZS1hcmNoIHByZWJ1aWxkcyBvdmVyIG11bHRpLWFyY2hcbiAgcmV0dXJuIGEuYXJjaGl0ZWN0dXJlcy5sZW5ndGggLSBiLmFyY2hpdGVjdHVyZXMubGVuZ3RoXG59XG5cbmZ1bmN0aW9uIHBhcnNlVGFncyAoZmlsZSkge1xuICB2YXIgYXJyID0gZmlsZS5zcGxpdCgnLicpXG4gIHZhciBleHRlbnNpb24gPSBhcnIucG9wKClcbiAgdmFyIHRhZ3MgPSB7IGZpbGU6IGZpbGUsIHNwZWNpZmljaXR5OiAwIH1cblxuICBpZiAoZXh0ZW5zaW9uICE9PSAnbm9kZScpIHJldHVyblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRhZyA9IGFycltpXVxuXG4gICAgaWYgKHRhZyA9PT0gJ25vZGUnIHx8IHRhZyA9PT0gJ2VsZWN0cm9uJyB8fCB0YWcgPT09ICdub2RlLXdlYmtpdCcpIHtcbiAgICAgIHRhZ3MucnVudGltZSA9IHRhZ1xuICAgIH0gZWxzZSBpZiAodGFnID09PSAnbmFwaScpIHtcbiAgICAgIHRhZ3MubmFwaSA9IHRydWVcbiAgICB9IGVsc2UgaWYgKHRhZy5zbGljZSgwLCAzKSA9PT0gJ2FiaScpIHtcbiAgICAgIHRhZ3MuYWJpID0gdGFnLnNsaWNlKDMpXG4gICAgfSBlbHNlIGlmICh0YWcuc2xpY2UoMCwgMikgPT09ICd1dicpIHtcbiAgICAgIHRhZ3MudXYgPSB0YWcuc2xpY2UoMilcbiAgICB9IGVsc2UgaWYgKHRhZy5zbGljZSgwLCA0KSA9PT0gJ2FybXYnKSB7XG4gICAgICB0YWdzLmFybXYgPSB0YWcuc2xpY2UoNClcbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2dsaWJjJyB8fCB0YWcgPT09ICdtdXNsJykge1xuICAgICAgdGFncy5saWJjID0gdGFnXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdGFncy5zcGVjaWZpY2l0eSsrXG4gIH1cblxuICByZXR1cm4gdGFnc1xufVxuXG5mdW5jdGlvbiBtYXRjaFRhZ3MgKHJ1bnRpbWUsIGFiaSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhZ3MpIHtcbiAgICBpZiAodGFncyA9PSBudWxsKSByZXR1cm4gZmFsc2VcbiAgICBpZiAodGFncy5ydW50aW1lICYmIHRhZ3MucnVudGltZSAhPT0gcnVudGltZSAmJiAhcnVudGltZUFnbm9zdGljKHRhZ3MpKSByZXR1cm4gZmFsc2VcbiAgICBpZiAodGFncy5hYmkgJiYgdGFncy5hYmkgIT09IGFiaSAmJiAhdGFncy5uYXBpKSByZXR1cm4gZmFsc2VcbiAgICBpZiAodGFncy51diAmJiB0YWdzLnV2ICE9PSB1dikgcmV0dXJuIGZhbHNlXG4gICAgaWYgKHRhZ3MuYXJtdiAmJiB0YWdzLmFybXYgIT09IGFybXYpIHJldHVybiBmYWxzZVxuICAgIGlmICh0YWdzLmxpYmMgJiYgdGFncy5saWJjICE9PSBsaWJjKSByZXR1cm4gZmFsc2VcblxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuZnVuY3Rpb24gcnVudGltZUFnbm9zdGljICh0YWdzKSB7XG4gIHJldHVybiB0YWdzLnJ1bnRpbWUgPT09ICdub2RlJyAmJiB0YWdzLm5hcGlcbn1cblxuZnVuY3Rpb24gY29tcGFyZVRhZ3MgKHJ1bnRpbWUpIHtcbiAgLy8gUHJlY2VkZW5jZTogbm9uLWFnbm9zdGljIHJ1bnRpbWUsIGFiaSBvdmVyIG5hcGksIHRoZW4gYnkgc3BlY2lmaWNpdHkuXG4gIHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnJ1bnRpbWUgIT09IGIucnVudGltZSkge1xuICAgICAgcmV0dXJuIGEucnVudGltZSA9PT0gcnVudGltZSA/IC0xIDogMVxuICAgIH0gZWxzZSBpZiAoYS5hYmkgIT09IGIuYWJpKSB7XG4gICAgICByZXR1cm4gYS5hYmkgPyAtMSA6IDFcbiAgICB9IGVsc2UgaWYgKGEuc3BlY2lmaWNpdHkgIT09IGIuc3BlY2lmaWNpdHkpIHtcbiAgICAgIHJldHVybiBhLnNwZWNpZmljaXR5ID4gYi5zcGVjaWZpY2l0eSA/IC0xIDogMVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc053anMgKCkge1xuICByZXR1cm4gISEocHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm53KVxufVxuXG5mdW5jdGlvbiBpc0VsZWN0cm9uICgpIHtcbiAgaWYgKHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5lbGVjdHJvbikgcmV0dXJuIHRydWVcbiAgaWYgKHByb2Nlc3MuZW52LkVMRUNUUk9OX1JVTl9BU19OT0RFKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJ1xufVxuXG5mdW5jdGlvbiBpc0FscGluZSAocGxhdGZvcm0pIHtcbiAgcmV0dXJuIHBsYXRmb3JtID09PSAnbGludXgnICYmIGZzLmV4aXN0c1N5bmMoJy9ldGMvYWxwaW5lLXJlbGVhc2UnKVxufVxuXG4vLyBFeHBvc2VkIGZvciB1bml0IHRlc3RzXG4vLyBUT0RPOiBtb3ZlIHRvIGxpYlxubG9hZC5wYXJzZVRhZ3MgPSBwYXJzZVRhZ3NcbmxvYWQubWF0Y2hUYWdzID0gbWF0Y2hUYWdzXG5sb2FkLmNvbXBhcmVUYWdzID0gY29tcGFyZVRhZ3NcbmxvYWQucGFyc2VUdXBsZSA9IHBhcnNlVHVwbGVcbmxvYWQubWF0Y2hUdXBsZSA9IG1hdGNoVHVwbGVcbmxvYWQuY29tcGFyZVR1cGxlcyA9IGNvbXBhcmVUdXBsZXNcbiJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwib3MiLCJydW50aW1lUmVxdWlyZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyIsInZhcnMiLCJwcm9jZXNzIiwiY29uZmlnIiwidmFyaWFibGVzIiwicHJlYnVpbGRzT25seSIsImVudiIsIlBSRUJVSUxEU19PTkxZIiwiYWJpIiwidmVyc2lvbnMiLCJtb2R1bGVzIiwicnVudGltZSIsImlzRWxlY3Ryb24iLCJpc053anMiLCJhcmNoIiwibnBtX2NvbmZpZ19hcmNoIiwicGxhdGZvcm0iLCJucG1fY29uZmlnX3BsYXRmb3JtIiwibGliYyIsIkxJQkMiLCJpc0FscGluZSIsImFybXYiLCJBUk1fVkVSU0lPTiIsImFybV92ZXJzaW9uIiwidXYiLCJzcGxpdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJsb2FkIiwiZGlyIiwicmVzb2x2ZSIsIm5hbWUiLCJqb2luIiwidG9VcHBlckNhc2UiLCJyZXBsYWNlIiwiZXJyIiwicmVsZWFzZSIsImdldEZpcnN0IiwibWF0Y2hCdWlsZCIsImRlYnVnIiwicHJlYnVpbGQiLCJuZWFyYnkiLCJkaXJuYW1lIiwiZXhlY1BhdGgiLCJ0YXJnZXQiLCJub2RlIiwiZWxlY3Ryb24iLCJmaWx0ZXIiLCJCb29sZWFuIiwiRXJyb3IiLCJ0dXBsZXMiLCJyZWFkZGlyU3luYyIsIm1hcCIsInBhcnNlVHVwbGUiLCJ0dXBsZSIsIm1hdGNoVHVwbGUiLCJzb3J0IiwiY29tcGFyZVR1cGxlcyIsInByZWJ1aWxkcyIsInBhcnNlZCIsInBhcnNlVGFncyIsImNhbmRpZGF0ZXMiLCJtYXRjaFRhZ3MiLCJ3aW5uZXIiLCJjb21wYXJlVGFncyIsImZpbGUiLCJmaWxlcyIsInRlc3QiLCJhcnIiLCJsZW5ndGgiLCJhcmNoaXRlY3R1cmVzIiwiZXZlcnkiLCJpbmNsdWRlcyIsImEiLCJiIiwiZXh0ZW5zaW9uIiwicG9wIiwidGFncyIsInNwZWNpZmljaXR5IiwiaSIsInRhZyIsIm5hcGkiLCJzbGljZSIsInJ1bnRpbWVBZ25vc3RpYyIsIm53IiwiRUxFQ1RST05fUlVOX0FTX05PREUiLCJ3aW5kb3ciLCJ0eXBlIiwiZXhpc3RzU3luYyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-gyp-build/node-gyp-build.js\n");

/***/ })

};
;